import agent from 'superagent-bluebird-promise'
import fetch from 'node-fetch'



export const getProfileUrlsForPage = page => {
  let url = `https://members.educause.edu/api/MemberSearch?pId=4a86fa47-eb9b-4ef3-b6b6-f1a082160768&membertype=Individual&page=${page}&perPage=20&sortBy=relevance&sortOrder=desc`
  return agent
        .get(url)
        .then(res => res.body.results.map(result => result.fullUrl))
        .catch(err => err)
}

export const getMemberProfile = shortUrl => {
  let url = `https://members.educause.edu${shortUrl}`
  console.log('getting', url)
 var headers = {
    'Accept-Encoding': 'gzip, deflate, sdch, br',
    'Accept-Language': 'en-US,en;q=0.8,sv;q=0.6',
    'Upgrade-Insecure-Requests': '1',
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Referer': 'https://sso.educause.edu/',
    'Connection': 'keep-alive',
    'Cache-Control': 'max-age=0',
    'Cookie': 'ASP.NET_SessionId=fl1ip2n313s41p3nikbpt1el; __RequestVerificationToken=-srYKlpoMATwPuykNmyGfUVJAxfx2Fnlao9eEw4-yjIfOD3z039KeizWJ9_3MG1C1BiLwCGQQtntBHjnxaqowg6zNYweQD5mhv-vDTU8iwY1; gsScrollPos=; _ga=GA1.2.1941357446.1494862777; _gid=GA1.2.976431317.1494972058; _dc_gtm_UA-64677622-3=1; _gat_UA-16119816-1=1; sc_expview=0; .ASPXAUTH=D55229F23D72F3195873B52112D2DFF7B8275DF0C859540CA9C109387CC4099572726D7618FF7B8E272B4A2C5671E79898FA8C77AE459A36B5C14FC2470D4075375DEC933525D740F06ACDE2606FA4B53F34DA1D99DFCF0DAAADEA290EC1642C7A21723C61C5996D321F8AE015DB5B7A815AFF1EBB383F57A5B34DD33AA1BC178EA408ADC277CADE27DB6A6687057D8E3115E376F7DB3DB3AD7BB35532B88CF4A66EFA5D52FD359AD5449FC1A433283CF7BE1050C4C8392966B26D151F4B0C69DE555680632C0F9F001055C8F24EA03C8D481BB86B8ACBBDEC6372170920553F86012FC29B4EF824176CBA9BFEA4F3F2D60C7EC87B023049C344EB81A5A6E2078DA1D3AE6FB7D295276C73D69F2497FA34845477E987FA0E9E29BA2B44A78E317351DDA0EB0219A6DB132DA1AECA36DE7D9FBC50AB00B02550DA063F90E2F5C28D23D7C96816C4379A35C863111A410F3EFFCAE3167A7FB1A6A33455C8C20B91B47C0A57693F325C6730593BD800CC963173A6ACE472DB84C31D4B3EDAB8EA12A4396E5E497B1AAF59433D840E8487AAD2F68EB64CE4D3E31693E33055A10B913839EE9CA10F311CEB20140D1900D38AC7032D58C88F1CA0DE9B051F0F2312A1DA6047DE0AE4A6C5055FBF67F061C7BB3DDD9BE65937B38CB681C6B5610D84B8A4CFDBD92B798EE540D1F650083A5D3F60C9940AE6095B15015CCD1C8203E9BAD82ACE4C25E53D07A1188F75775BF32F73BE313FE05E6D53B03BF4C3CBE674BA'
};




  return agent
          .get(url)
          .set(headers)
          .then(res => res.text)
          .catch(err => err)
}
